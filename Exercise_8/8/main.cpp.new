#include <cmath>
#include <valarray>
#include <functional>
#include <iostream>
#include <random>

void block_average(double *sample, unsigned int sample_size, unsigned int nblocks, double *mean, double *err) {
    /*
     *  Compute the block average (<mean>, size nblocks) 
     *  and standard deviation (<err>, size nblocks)
     *  from the sample.
     */ 

    unsigned int samples_per_block = sample_size / nblocks;
    double block_mean, 
           mean_cum(0), 
           mean_sq_cum(0);
     
    for (unsigned int n = 0; n < nblocks; n++) {
        block_mean = 0;
        for (unsigned int j = 0; j < samples_per_block; j++)
            block_mean += sample[n*samples_per_block + j];
        block_mean /= samples_per_block;
        
        mean_cum += block_mean;
        mean_sq_cum += pow(block_mean, 2);
        mean[n] = mean_cum / (n + 1);
        err[n] = std::sqrt((mean_sq_cum / (n + 1) - std::pow(mean[n], 2)) / n);
    }
    err[0] = 0;
}

double norm(std::valarray<double> p){
    return std::sqrt(std::pow(p,2).sum());
}

double psi100(std::valarray<double> p){
    return 1/M_PI * std::exp(-2*norm(p));
}

std::valarray<double> T_uniform(std::valarray<double> p, double step){
    double dr = step * std::rand();
    double theta = 2 * M_PI * std::rand();
    double phi = M_PI * std::rand();
        
    return p + dr * std::valarray({std::sin(theta) * std::cos(phi),
                                   std::sin(theta) * std::sin(phi),
                                   std::cos(theta)
                                  });
}

void metropolis(std::function<double(std::valarray<double>)> pdf, 
                std::function<std::valarray<double>(std::valarray<double>, double step)> T, 
                std::valarray<double> p,
                double step,
                unsigned int n_samples){
    unsigned int rej = 0;
    double mean = 0;
    
    for (unsigned int n =0; n < n_samples; n++) {
        std::valarray<double> p_new = T(p, step);
        double A = std::min(1., pdf(p_new)/pdf(p));
        double r = std::random();
        std::cout << n << " ::";
        if (r <= A) {
            p = p_new;
            for (unsigned int i=0; i < p.size(); i++)
                std::cout << p[i] << " ";
            std::cout << ": " << norm(p) << " " << pdf(p) << std::endl;
            mean += norm(p);
        } else {
            n--;
            rej++;
            std::cout << A << "*" << r << std::endl;
        }
    }
    std::cout << "Rejected " << rej/(double)n_samples << std::endl;
    std::cout << "Mean " << mean/(double)n_samples << std::endl;
}
    
int main(){  
    std::valarray<double> p (1,3);
    
    metropolis(psi100, T_uniform, p, 2.6, 10);
}
